					Interview Questions
					===================

Core Java:
==========

1. What is Core Java?
Core Java refers to the fundamental building blocks of the Java programming language, including OOP concepts, basic libraries, and essential features for creating general-purpose applications.

2. What are the main principles of Object-Oriented Programming (OOP)?
Encapsulation: Wrapping data (fields) and methods into a single unit (class).

Inheritance: Acquiring properties of one class in another.

Polymorphism: Ability to take multiple forms (e.g., method overloading/overriding).

Abstraction: Hiding implementation details and showing only functionality.

3. What is the difference between JDK, JRE, and JVM?
JDK (Java Development Kit): A toolkit for developing Java programs, including the compiler and debugger.

JRE (Java Runtime Environment): Contains libraries and JVM to run Java applications.

JVM (Java Virtual Machine): Executes the bytecode and provides runtime environment.

4. Explain the concept of a Java Virtual Machine (JVM).
JVM is a virtual machine that runs Java bytecode. It provides platform independence by allowing code to run on any device with JVM installed.

5. What are Java's access modifiers?
Public: Accessible from anywhere.

Private: Accessible only within the class.

Protected: Accessible within the same package and subclasses.

Default: Accessible only within the same package.

6. What is the difference between "==” and ".equals()” in Java?
==: Compares references (memory location).

equals(): Compares the content of the objects.

7. What is a constructor in Java?
A constructor is a special method used to initialize objects. It has the same name as the class and no return type.

8. Explain Method Overloading and Method Overriding.
Overloading: Same method name with different parameters in the same class.

Overriding: Same method name and parameters in a subclass.

9. What is the difference between static and non-static methods?
Static: Belongs to the class; can be called without an object.

Non-Static: Belongs to an instance of the class; requires an object.

10. What are Java’s data types?
Primitive: int, char, double, boolean, etc.

Non-Primitive: Arrays, Strings, and objects.

11. What is the "final" keyword in Java?
Final Variable: Cannot be reassigned.

Final Method: Cannot be overridden.

Final Class: Cannot be extended.

12. What are Java exceptions?
Exceptions are events that disrupt program execution. They are categorized into:

Checked Exceptions: Caught at compile time (e.g., IOException).

Unchecked Exceptions: Occur during runtime (e.g., NullPointerException).

13. What is the difference between "throw" and "throws"?
throw: Used to explicitly throw an exception.

throws: Declares the exceptions a method can throw.

14. What is the Java Collection Framework?
A unified architecture for working with groups of objects. It includes interfaces like List, Set, Queue, and classes like ArrayList, HashSet, LinkedList.

15. How is memory managed in Java?
Java manages memory via:

Heap Memory: Stores objects.

Stack Memory: Stores local variables and method calls.

Garbage Collection: Automatically frees memory used by unreferenced objects.

16. What is the difference between an Array and an ArrayList?
Array: Fixed size, supports primitives and objects.

ArrayList: Dynamic size, supports only objects.

17. What is a thread in Java?
A thread is a lightweight process for concurrent execution. Java provides the Thread class and Runnable interface for creating threads.

18. What are synchronized methods in Java?
A synchronized method allows only one thread to access it at a time, ensuring thread safety.

19. What is the difference between "String", "StringBuffer", and "StringBuilder"?
String: Immutable.

StringBuffer: Mutable and thread-safe.

StringBuilder: Mutable but not thread-safe.

20. What are annotations in Java?
Annotations are metadata used to provide information to the compiler or runtime. Examples: @Override, @Deprecated, @FunctionalInterface.














MySQL:
======

1. What is MySQL?
MySQL is an open-source relational database management system (RDBMS) based on Structured Query Language (SQL), used to store, manage, and retrieve data efficiently.

2. What is the difference between SQL and MySQL?
SQL: A language for querying and manipulating databases.

MySQL: A software application that implements SQL to manage databases.

3. Explain the types of databases supported by MySQL.
MySQL supports various storage engines, including:

InnoDB: Default, supports ACID transactions.

MyISAM: Fast performance, lacks transactions.

Memory: Stores data in RAM for quick access.

4. What is the purpose of a primary key in MySQL?
A primary key uniquely identifies each record in a table. It cannot contain NULL values and ensures entity integrity.

5. What is the difference between CHAR and VARCHAR in MySQL?
CHAR: Fixed-length storage.

VARCHAR: Variable-length storage, uses less space for shorter strings.

6. How can you fetch only unique records from a table?
Use the DISTINCT keyword:

sql
SELECT DISTINCT column_name FROM table_name;
7. What is the use of the GROUP BY clause in MySQL?
GROUP BY aggregates data based on specific columns. Example:

sql
SELECT column_name, COUNT(*) FROM table_name GROUP BY column_name;
8. Explain the difference between WHERE and HAVING clauses.
WHERE: Filters records before aggregation.

HAVING: Filters aggregated data.

9. What is a foreign key?
A foreign key establishes a relationship between two tables by referring to the primary key of another table.

10. What is the difference between INNER JOIN, LEFT JOIN, and RIGHT JOIN?
INNER JOIN: Returns matching rows from both tables.

LEFT JOIN: Returns all rows from the left table, with matching rows from the right table.

RIGHT JOIN: Returns all rows from the right table, with matching rows from the left table.

11. What are indexes in MySQL?
Indexes are used to improve query performance by quickly locating data in a table.

12. What is the difference between DELETE and TRUNCATE?
DELETE: Removes specific rows and can have a WHERE clause.

TRUNCATE: Removes all rows and resets the table.

13. What is a transaction in MySQL?
A transaction is a sequence of SQL statements executed as a single unit, ensuring data integrity using ACID properties.

14. What are ACID properties in MySQL?
Atomicity: Ensures all operations are completed or none at all.

Consistency: Maintains database integrity after transactions.

Isolation: Transactions occur independently.

Durability: Ensures data persistence after transaction completion.

15. What is normalization in MySQL?
Normalization is the process of organizing database tables to minimize redundancy and dependency. Common forms include:

1NF: Ensure data is atomic.

2NF: Eliminate partial dependency.

3NF: Remove transitive dependency.

16. What are stored procedures in MySQL?
Stored procedures are precompiled SQL statements stored in the database, improving performance and code reuse.

17. How do you optimize a MySQL query?
Use indexes.

Avoid SELECT *; specify columns.

Use LIMIT for large datasets.

Optimize JOINs and WHERE conditions.

18. What is the difference between UNION and UNION ALL?
UNION: Combines result sets and removes duplicates.

UNION ALL: Combines result sets, including duplicates.

19. What is the purpose of the MySQL Workbench?
MySQL Workbench is a visual tool for database design, development, and administration, providing features like query writing and ER modeling.

20. What is replication in MySQL?
Replication allows data copying from one database server (master) to others (slaves) for load balancing and redundancy.














JDBC:
=====

1. What is JDBC?
JDBC is an API in Java that allows Java applications to interact with relational databases using SQL queries.

2. What are the main components of JDBC architecture?
Driver Manager: Manages database drivers.

Driver: Establishes a connection between a Java application and the database.

Connection: Represents the connection to the database.

Statement: Executes SQL queries.

ResultSet: Represents query results.

3. Explain the types of JDBC drivers.
Type-1 (JDBC-ODBC Bridge Driver): Uses ODBC drivers; platform-dependent.

Type-2 (Native-API Driver): Uses database-specific native APIs.

Type-3 (Network Protocol Driver): Translates JDBC calls into a protocol for database servers.

Type-4 (Thin Driver): Pure Java driver; interacts directly with the database.

4. How do you register a JDBC driver in Java?
Use the Class.forName() method:

java
Class.forName("com.mysql.cj.jdbc.Driver");
5. What is the purpose of the Connection interface?
The Connection interface establishes a session with the database. It provides methods to create Statement, PreparedStatement, and manage transactions.

6. What is the difference between Statement and PreparedStatement?
Statement: Used for executing static SQL queries.

PreparedStatement: Used for dynamic and parameterized SQL queries, which also prevent SQL injection.

7. How do you execute a SQL query using JDBC?
Steps to execute a query:

Load the driver.

Establish a connection.

Create a Statement or PreparedStatement.

Execute the query using executeQuery() or executeUpdate().

8. What is SQL injection, and how does JDBC prevent it?
SQL injection is a security vulnerability where malicious SQL code is injected into queries. JDBC prevents it by using parameterized queries with PreparedStatement.

9. What is ResultSet in JDBC?
ResultSet is an interface that represents the result of a database query. It allows retrieval of data row by row using methods like next().

10. Explain ResultSet types.
TYPE_FORWARD_ONLY: Read-only, forward navigation.

TYPE_SCROLL_INSENSITIVE: Can scroll both directions; doesn't reflect database updates.

TYPE_SCROLL_SENSITIVE: Can scroll both directions and reflects updates.

11. What is the difference between execute(), executeQuery(), and executeUpdate()?
execute(): Used for any SQL command.

executeQuery(): Executes SELECT queries.

executeUpdate(): Executes INSERT, UPDATE, DELETE, and DDL commands.

12. How do you handle transactions in JDBC?
Transactions are handled using setAutoCommit() and commit():

java
connection.setAutoCommit(false);
// Execute statements
connection.commit(); // Commit transaction
13. What is a batch update in JDBC?
Batch update allows executing multiple SQL statements in a single transaction, improving performance:

java
Statement stmt = connection.createStatement();
stmt.addBatch("INSERT INTO table VALUES (1, 'A')");
stmt.addBatch("INSERT INTO table VALUES (2, 'B')");
stmt.executeBatch();
14. What are JDBC savepoints?
Savepoints allow partial rollback within a transaction:

java
Savepoint savepoint1 = connection.setSavepoint();
connection.rollback(savepoint1);
15. What are metadata classes in JDBC?
DatabaseMetaData: Provides database-level information (e.g., tables, stored procedures).

ResultSetMetaData: Provides information about query result columns.

16. How do you close JDBC resources properly?
Close resources in the reverse order of their creation:

java
resultSet.close();
statement.close();
connection.close();
17. What is connection pooling in JDBC?
Connection pooling is a mechanism to reuse database connections, reducing the overhead of creating and closing connections frequently.

18. What are the advantages of using JDBC?
Platform-independent.

Secure with PreparedStatement.

Supports multiple databases via drivers.

Provides transaction control and batch processing.

19. How does JDBC handle exceptions?
JDBC throws SQLException for database-related errors. Use try-catch blocks to handle exceptions:

java
try {
    // JDBC code
} catch (SQLException e) {
    e.printStackTrace();
}
20. What are the limitations of JDBC?
Requires writing SQL queries manually.

Difficult to maintain for complex systems.

Lack of an Object-Relational Mapping (ORM) framework.















Spring Core:
============

1. What is Spring Framework?
The Spring Framework is a Java-based framework for building enterprise applications. It provides features like Dependency Injection (DI), Aspect-Oriented Programming (AOP), and data access through Hibernate/JPA integration.

2. What are the main modules of the Spring Framework?
Core Container: Includes Beans, Context, and Expression Language.

AOP (Aspect-Oriented Programming).

Data Access: JDBC, ORM, Transactions.

Web: MVC, WebSocket.

Test: Testing with JUnit.

3. Explain Dependency Injection (DI) in Spring.
DI is a design pattern that enables objects to be injected into a class via constructors, setters, or fields rather than being instantiated inside the class.

4. What are the ways to configure a Spring application?
XML-based configuration: Define beans and dependencies in XML files.

Annotation-based configuration: Use annotations like @Component, @Autowired.

Java-based configuration: Create @Configuration classes with @Bean methods.

5. What is the role of the ApplicationContext in Spring?
The ApplicationContext is the central interface for accessing the Spring container, which initializes and manages beans and their dependencies.

6. Explain the Bean lifecycle in Spring.
Instantiation: Bean is created.

Dependency Injection: Dependencies are set.

Custom Initialization: init-method or @PostConstruct can be used.

Use: Bean is ready for use.

Destruction: destroy-method or @PreDestroy is called.

7. What is the difference between BeanFactory and ApplicationContext?
BeanFactory: Lightweight container for managing beans.

ApplicationContext: Extends BeanFactory and provides advanced features like event handling and AOP support.

8. What are the scopes of a Spring bean?
Singleton: One instance per container.

Prototype: New instance per request.

Request: One instance per HTTP request.

Session: One instance per HTTP session.

Global-session: One instance per global session.

9. What is the use of the @Autowired annotation?
@Autowired is used to inject beans automatically by type. It simplifies dependency injection in Spring applications.

10. What is the difference between @Component, @Service, and @Repository?
@Component: Generic stereotype for beans.

@Service: Indicates business logic layer.

@Repository: Indicates data access layer, provides exception translation.

11. What is the significance of the @Bean annotation?
@Bean is used to define beans explicitly in Java-based configuration. It provides more control than component scanning.

12. What are Spring profiles?
Profiles allow the definition of different configurations for different environments. Use @Profile to specify beans for specific profiles.

13. What is Aspect-Oriented Programming (AOP) in Spring?
AOP is a programming paradigm used to define cross-cutting concerns like logging, security, and transactions. Spring provides AOP through annotations like @Aspect.

14. Explain the usage of @Transactional annotation in Spring.
@Transactional is used to define the transaction scope for methods or classes. It ensures data consistency in database operations.

15. What is Spring MVC?
Spring MVC is a module for building web applications. It follows the Model-View-Controller design pattern to separate concerns.

16. How does Spring achieve loose coupling?
Spring achieves loose coupling through Dependency Injection, where objects are provided externally rather than being created inside classes.

17. What is the difference between @Qualifier and @Primary annotations?
@Qualifier: Resolves conflicts when multiple beans of the same type are available.

@Primary: Marks a bean as the default one if no qualifier is specified.

18. What is the DispatcherServlet in Spring MVC?
The DispatcherServlet acts as the front controller in Spring MVC. It handles requests and routes them to appropriate controllers.

19. What is the use of the @RequestMapping annotation?
@RequestMapping maps HTTP requests to handler methods in controllers. For example:

java
@RequestMapping("/example")
public String example() {
    return "exampleView";
}
20. What is the importance of Inversion of Control (IoC)?
IoC is the principle where control is given to the Spring container to manage objects and their lifecycle, promoting modular design.















Spring Boot:
============

1. What is Spring Boot?
Spring Boot is an extension of the Spring Framework that simplifies the development of Java-based applications. It provides features like auto-configuration, embedded servers, and starter dependencies for rapid application development.

2. What are the advantages of using Spring Boot?
Simplifies configuration with auto-configuration.

Embeds servers like Tomcat or Jetty.

Offers starter dependencies for streamlined dependency management.

Provides production-ready features like monitoring and metrics.

3. What is the Spring Boot Starter?
Starters are predefined dependencies that provide essential functionality. For example:

spring-boot-starter-web: For web applications.

spring-boot-starter-data-jpa: For database integration with JPA.

4. What is the significance of the @SpringBootApplication annotation?
@SpringBootApplication is a convenience annotation that combines:

@Configuration for configuration.

@EnableAutoConfiguration for auto-configuration.

@ComponentScan for scanning beans and components.

5. How does Spring Boot achieve auto-configuration?
Auto-configuration is enabled by @EnableAutoConfiguration, which automatically configures beans based on the classpath, properties, and annotations.

6. How can you run a Spring Boot application?
Using the main() method:

java
SpringApplication.run(Application.class, args);
By building and running a JAR or WAR file.

7. What is the role of application.properties or application.yml??
These files are used to configure Spring Boot applications, such as setting server ports, database connections, and other properties.

8. What is the difference between application.properties and application.yml??
application.properties: Key-value format.

application.yml: YAML format, which supports hierarchical data structure.

9. What is an embedded server in Spring Boot?
Spring Boot includes servers like Tomcat, Jetty, and Undertow. These are embedded, meaning you don’t need external deployment.

10. What is the actuator in Spring Boot?
Actuator provides production-ready features, such as monitoring and managing applications. Example endpoints:

/health: Application health.

/metrics: Application metrics.

11. What are profiles in Spring Boot?
Profiles allow different configurations for various environments (e.g., dev, test, production). Use the spring.profiles.active property to set profiles.

12. How do you connect Spring Boot with a database?
Define database properties in application.properties:

properties
spring.datasource.url=jdbc:mysql://localhost:3306/dbname
spring.datasource.username=user
spring.datasource.password=password
Use JPA or JDBC with Spring Boot starter dependencies.

13. What is the difference between @RestController and @Controller?
@RestController: Combines @Controller and @ResponseBody, suitable for REST APIs.

@Controller: Used for web applications with views like JSP/Thymeleaf.

14. How does Spring Boot handle exceptions?
Spring Boot provides @ControllerAdvice and @ExceptionHandler for centralized exception handling.

15. What is DevTools in Spring Boot?
DevTools is a Spring Boot dependency that enables hot swapping, automatic restart, and live reload during development.

16. What is the importance of Spring Initializr?
Spring Initializr is a web-based tool that helps generate Spring Boot project structures with the required dependencies.

17. What is the difference between Spring Boot and Spring MVC?
Spring MVC: A module for building web applications.

Spring Boot: Provides auto-configuration and starter dependencies, including Spring MVC, to simplify development.

18. What is the default server port in Spring Boot? How do you change it?
Default port: 8080.

Change using application.properties:

properties
server.port=9090
19. How does Spring Boot support externalized configuration?
Spring Boot supports configuration via:

application.properties/application.yml.

Environment variables.

Command-line arguments.

20. How do you deploy a Spring Boot application to a production server?
Build a JAR file using Maven or Gradle:

bash
mvn clean package
Deploy the JAR file using:

bash
java -jar your-app.jar
















JPA and Spring JPA:
===================

1. What is JPA?
JPA (Java Persistence API) is a specification for managing relational data in Java applications. It provides an abstraction over object-relational mapping (ORM) tools like Hibernate.

2. What are the key annotations in JPA?
@Entity: Marks a class as an entity.

@Table: Specifies the table name for the entity.

@Id: Defines the primary key.

@GeneratedValue: Specifies the generation strategy for primary keys.

@Column: Customizes column properties.

@OneToOne, @OneToMany, @ManyToOne, @ManyToMany: Define relationships between entities.

3. What is the difference between JPA and Hibernate?
JPA: A specification for ORM.

Hibernate: An implementation of JPA and a standalone ORM framework.

4. What is the purpose of the EntityManager in JPA?
EntityManager is the primary interface for interacting with the persistence context. It provides methods to persist, merge, remove, and query entities.

5. What is the difference between persist() and merge() in JPA?
persist(): Adds a new entity to the persistence context.

merge(): Updates an existing entity or adds it if not already in the persistence context.

6. What is the persistence context in JPA?
The persistence context is a cache where entities are managed. It ensures that any changes to entities are synchronized with the database.

7. What are the types of entity relationships in JPA?
One-to-One (@OneToOne).

One-to-Many (@OneToMany).

Many-to-One (@ManyToOne).

Many-to-Many (@ManyToMany).

8. What is the use of @JoinColumn annotation?
@JoinColumn is used to specify the foreign key column for entity relationships.

9. What is the difference between LAZY and EAGER fetching in JPA?
LAZY: Fetches data only when accessed.

EAGER: Fetches data immediately during the query.

10. What is Spring Data JPA?
Spring Data JPA is a part of the Spring Data project that simplifies data access by providing repositories for CRUD and query methods, built on top of JPA.

11. What are the main interfaces in Spring Data JPA?
CrudRepository: Basic CRUD operations.

JpaRepository: Adds JPA-specific operations (e.g., batch deletes).

PagingAndSortingRepository: Adds pagination and sorting functionality.

12. What is the significance of @Repository in Spring Data JPA?
@Repository marks a class as a Spring Data repository, indicating that it is responsible for data access and handling exceptions.

13. What is the difference between @Query and method name queries in Spring Data JPA?
Method name queries: Derive queries based on method names (e.g., findByName()).

@Query: Custom JPQL/SQL queries for more complex operations.

14. How does pagination work in Spring Data JPA?
Use the Pageable interface with repository methods:

java
Page<Entity> findAll(Pageable pageable);
15. What is the purpose of @Modifying in Spring Data JPA?
@Modifying is used for update or delete operations in @Query methods.

16. What is the difference between save() and saveAndFlush() in JpaRepository?
save(): Saves an entity but defers flushing.

saveAndFlush(): Saves an entity and immediately flushes changes to the database.

17. How do you define a custom repository in Spring Data JPA?
Create an interface for the custom repository.

Provide an implementation class.

Extend both the custom repository and the standard repository in your main interface.

18. What is @EntityGraph in JPA?
@EntityGraph is used to define queries that fetch specific entity attributes or associations, optimizing performance.

19. What is the use of @Transactional in Spring Data JPA?
@Transactional manages database transactions to ensure data consistency during CRUD or custom operations.

20. How does Spring Data JPA handle exception translation?
Spring Data JPA translates JPA exceptions into Spring’s DataAccessException hierarchy, making it easier to handle database errors.













Spring Data JPA and Spring Data JPA REST:
=========================================

1. What is Spring Data JPA?
Spring Data JPA is a part of the Spring Data project, providing an abstraction for JPA implementations like Hibernate. It simplifies database access by offering repositories with built-in CRUD and query operations.

2. What are the advantages of using Spring Data JPA?
Simplified database access.

Reduces boilerplate code.

Support for query derivation from method names.

Built-in CRUD operations.

Supports custom and native queries.

3. What are the main interfaces in Spring Data JPA?
CrudRepository: Basic CRUD operations.

PagingAndSortingRepository: Adds pagination and sorting features.

JpaRepository: Extends PagingAndSortingRepository with JPA-specific methods.

4. What is the purpose of the @Entity annotation?
Marks a class as a JPA entity, allowing it to be mapped to a database table.

5. What are derived query methods in Spring Data JPA?
Methods whose queries are automatically generated based on their names. Example:

java
List<User> findByLastName(String lastName);
6. What is the difference between save() and saveAndFlush()?
save(): Persists data but defers changes to be flushed to the database later.

saveAndFlush(): Persists and immediately flushes changes to the database.

7. What is the purpose of the @Query annotation?
Used for writing custom JPQL or SQL queries.

java
@Query("SELECT u FROM User u WHERE u.name = :name")
User findUserByName(@Param("name") String name);
8. How does Spring Data JPA handle pagination?
Use the Pageable interface with repository methods:

java
Page<User> findAll(Pageable pageable);
9. What is the @Modifying annotation used for?
Used with @Query for update and delete operations.

java
@Modifying
@Query("DELETE FROM User u WHERE u.status = :status")
void deleteByStatus(@Param("status") String status);
10. What is the role of the EntityManager in Spring Data JPA?
Provides operations for managing entity instances in the persistence context, like persist(), merge(), and remove().

11. How can you define a custom repository in Spring Data JPA?
Create an interface with custom methods.

Implement the interface with a custom class.

Extend the custom repository in your main repository.

Spring Data REST Questions
12. What is Spring Data REST?
Spring Data REST automatically exposes JPA repositories as RESTful APIs without the need for manual controllers.

13. What annotations are used in Spring Data REST?
@RepositoryRestResource: Customizes the RESTful API for a repository.

@RestResource: Customizes or disables individual endpoints.

@CrossOrigin: Enables CORS for REST endpoints.

14. How does Spring Data REST expose a repository as a RESTful resource?
By including the Spring Data REST dependency, repositories are exposed as REST endpoints automatically (e.g., /users for a UserRepository).

15. How do you customize endpoint paths in Spring Data REST?
Use the @RepositoryRestResource annotation:

java
@RepositoryRestResource(path = "people")
public interface UserRepository extends JpaRepository<User, Long> {}
16. What is HAL in the context of Spring Data REST?
HAL (Hypertext Application Language) is the default format for Spring Data REST responses, providing hyperlinks to related resources.

17. How do you disable an endpoint in Spring Data REST?
Use the @RestResource annotation and set exported to false:

java
@RestResource(exported = false)
void deleteById(Long id);
18. How does Spring Data REST handle pagination and sorting?
Automatically adds parameters like page, size, sort to REST endpoints.

19. What is the purpose of the RepositoryRestConfiguration class?
Customizes RESTful endpoints, such as exposing IDs or changing base paths.

20. What is the difference between Spring Data JPA and Spring Data REST?
Spring Data JPA: Provides abstractions for working with databases.

Spring Data REST: Exposes those abstractions as RESTful APIs.

